"""
Django settings for newproject project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import certifi
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# newproject/settings.py

import os

# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# if not os.path.exists(LOG_DIR):
#     os.makedirs(LOG_DIR)
# if not os.path.exists(ARCHIVED_LOG_DIR):
#     os.makedirs(ARCHIVED_LOG_DIR)
# # ... other settings ...

# ... (existing settings) ...
LOG_DIR = os.path.join(BASE_DIR, 'logs')
ARCHIVED_LOG_DIR = os.path.join(BASE_DIR, 'archived_logs')

# ... (rest of your settings) ...
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@vdlq9$q7b)56bd*-kn_@uoh=h9x(tjar+4$d_s=fdb_21p!w7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['GAURAV7192.pythonanywhere.com','127.0.0.1']

# settings.py
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
AUDIT_LOG_DIR = os.path.join(BASE_DIR, 'audit_logs')

# Application definition
# Base directory of your project
# BASE_DIR = Path(__file__).resolve().parent.parent

# Static files (CSS, JavaScript, Images)
# STATIC_URL = '/static/'  # URL to use when referring to static files
#
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),  # Your static folder path
# ]
#
# # This is used in production when using collectstatic
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
<<<<<<< HEAD
    'staff',
=======
   'staff',
>>>>>>> 42d7668bcb48967ff0541abffa23e1d2e9004495
    'simple_history',

# 'django.contrib.messages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',

    # custom middleware

    'newproject.middleware.DisableCacheMiddleware',
# 'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
]

# from django.contrib.messages import constants as messages
# MESSAGE_TAGS = {
#     messages.DEBUG: 'alert alert-debug',
#     messages.INFO: 'alert alert-info',
#     messages.SUCCESS: 'alert alert-success',
#     messages.WARNING: 'alert alert-warning',
#     messages.ERROR: 'alert alert-danger',
# }

X_FRAME_OPTIONS = 'ALLOWALL'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
ROOT_URLCONF = 'newproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'newproject.wsgi.application'

AUTHENTICATION_BACKENDS = [
    'users.backends.AccountLockoutBackend', # Your custom backend
    'django.contrib.auth.backends.ModelBackend', # Keep Django's default if you need it for other auth methods
]

# Database
# # https://docs.djangoproject.com/en/5.1/ref/settings/#databasesif
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mydb',   # Change to your actual database name
        'USER': 'root',         # Your MySQL username
        'PASSWORD': '7192',     # Your MySQL password
        'HOST': 'localhost',             # For local setup
        'PORT': '3306',                  # MySQL default port
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#
# LOGIN_URL = '/login/'
# LOGIN_REDIRECT_URL = '/leave_dashboard/'


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


STATIC_URL = 'static/'
STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',  # You can adjust the level to DEBUG or INFO depending on your needs
            'class': 'logging.FileHandler',
            'filename': 'activity_log.log',  # Ensure logs directory exists
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'myapp': {  # Replace with your app name (e.g., 'myapp')
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
# settings.py
AUDIT_LOG_FILE = os.path.join(BASE_DIR, 'audit.log')
# Email Backend Configuration for SMTP (Gmail)
# EMAIL_BACKEND = 'staff.email_backends.BypassSSLVerificationEmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT =465
EMAIL_USE_TLS = True  # Crucial for TLS (port 587)
EMAIL_USE_SSL = False # Ensure this is False if EMAIL_USE_TLS is True

# Your Gmail account for sending emails
EMAIL_HOST_USER = 'gauravsinghbhandari77@gmail.com'

EMAIL_HOST_PASSWORD = 'rdzs lpza yels nhbl'
DEFAULT_FROM_EMAIL = 'gauravsinghbhandari77@gmail.com'
SERVER_EMAIL = 'gauravsinghbhandari77@gmail.com'
import smtplib
from django.core.mail.backends.smtp import EmailBackend
#
# class NoSSLContextEmailBackend(EmailBackend):
#     def _get_ssl_context(self):
#         import ssl
#         context = ssl._create_default_https_context()  # Use default context without verification
#         context.check_hostname = False
#         context.verify_mode = ssl.CERT_NONE
#         return context



# Development email backend
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
#
# import ssl
# import certifi
# from django.core.mail import utils
#
# # Create a custom SSL context using certifi
# ssl_context = ssl.create_default_context(cafile=certifi.where())
#
# # Patch the global SMTP SSL context used by Django
# utils.ssl.create_default_context = lambda *args, **kwargs: ssl_context
